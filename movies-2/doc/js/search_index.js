var search_data = {"index":{"searchIndex":["aggregation","enumerable","moviedata","movietest","object","predicter","similarity","average()","avg_rating()","col()","common()","cosine()","geo_mean()","load_data()","mean()","mean_average()","most_similar()","movies()","new()","new()","pearson()","popularity()","popularity_list()","predict()","rating()","read_file()","rms()","run_test()","similarity()","square_sum()","stdev()","sum()","test()","time()","to_a()","var()","viewers()","weight_average()"],"longSearchIndex":["aggregation","enumerable","moviedata","movietest","object","predicter","similarity","aggregation::average()","moviedata#avg_rating()","enumerable#col()","similarity::common()","similarity::cosine()","enumerable#geo_mean()","moviedata#load_data()","enumerable#mean()","aggregation::mean_average()","predicter#most_similar()","moviedata#movies()","movietest::new()","predicter::new()","similarity::pearson()","moviedata#popularity()","moviedata#popularity_list()","predicter#predict()","moviedata#rating()","moviedata#read_file()","enumerable#rms()","predicter#run_test()","predicter#similarity()","enumerable#square_sum()","enumerable#stdev()","enumerable#sum()","object#test()","object#time()","movietest#to_a()","enumerable#var()","moviedata#viewers()","aggregation::weight_average()"],"info":[["Aggregation","","Aggregation.html","","<p>module of aggregation methods, takes a list of (rating,similarity) of\nsimilar users\n"],["Enumerable","","Enumerable.html","","<p>extension to enumerable to provide statistics\n"],["MovieData","","MovieData.html","","<p>Loads dataset from file Provide access to movie data\n"],["MovieTest","","MovieTest.html","","<p>provides predict result metrics\n"],["Object","","Object.html","",""],["Predicter","","Predicter.html","","<p>calculates similarity between users and predicts rating for a movie the\nuser haven&#39;t seen\n"],["Similarity","","Similarity.html","","<p>module of similarity measures\n"],["average","Aggregation","Aggregation.html#method-c-average","(data,u_id,ratings)","<p>predict by all similar user&#39;s average ratings\n"],["avg_rating","MovieData","MovieData.html#method-i-avg_rating","(user_id)","<p>returns a specific user&#39;s average rating on all movies he viewed in the\ntrain set\n"],["col","Enumerable","Enumerable.html#method-i-col","(cname)","<p>returns an array of a specific column of a tuple or structures\n"],["common","Similarity","Similarity.html#method-c-common","(data,u1,u2)","<p>returns the common movie count as a measure\n"],["cosine","Similarity","Similarity.html#method-c-cosine","(data,u1,u2)","<p>using cosine similarity\n"],["geo_mean","Enumerable","Enumerable.html#method-i-geo_mean","()","<p>geometric average of all elements\n"],["load_data","MovieData","MovieData.html#method-i-load_data","(folder,dataset=nil)","<p>reads the dataset folder is the path to the data,dataset specify the\ntrain/test split to use, if nil â€¦\n"],["mean","Enumerable","Enumerable.html#method-i-mean","()","<p>average of all elements\n"],["mean_average","Aggregation","Aggregation.html#method-c-mean_average","(data,u_id,ratings)","<p>predict by user&#39;s average rating and all similar user&#39;s ratings\nweighted by similarity\n"],["most_similar","Predicter","Predicter.html#method-i-most_similar","(u_id,m_id=nil,count=25)","<p>return a list of tuples with (userid,similarity)\n"],["movies","MovieData","MovieData.html#method-i-movies","(u_id=nil)","<p>returns movies rated by user or all movies if u_id is nil\n"],["new","MovieTest","MovieTest.html#method-c-new","(data)","<p>data should be a list of tuple of user id,movie id,true rating,predicted\nrating\n"],["new","Predicter","Predicter.html#method-c-new","(data,similarity,aggregation)","<p>requires dataset, similarity measurements and aggregation methods\n"],["pearson","Similarity","Similarity.html#method-c-pearson","(data,u1,u2)","<p>using person measure\n"],["popularity","MovieData","MovieData.html#method-i-popularity","(movie_id)","<p>gets the total reviewed times of a movie\n"],["popularity_list","MovieData","MovieData.html#method-i-popularity_list","()","<p>gets the movie list sorted by the number of reviews\n"],["predict","Predicter","Predicter.html#method-i-predict","(u_id,m_id)","<p>predict one movie rating of a user by selected measurements\n"],["rating","MovieData","MovieData.html#method-i-rating","(user_id,movie_id)","<p>retursn a specific user&#39;s rating on a movie in the train set\n"],["read_file","MovieData","MovieData.html#method-i-read_file","(path)","<p>reads a specific dataset and returns a array of a structure with\nu_id,m_id,rating and time\n"],["rms","Enumerable","Enumerable.html#method-i-rms","()","<p>rms value of the elements\n"],["run_test","Predicter","Predicter.html#method-i-run_test","(k=nil)","<p>predict the top k items in the test set and return a MovieTest structure\n"],["similarity","Predicter","Predicter.html#method-i-similarity","(user1,user2)","<p>returns similarity between two users\n"],["square_sum","Enumerable","Enumerable.html#method-i-square_sum","()","<p>sum of all elements&#39; square\n"],["stdev","Enumerable","Enumerable.html#method-i-stdev","()","<p>standard deviation of the elements\n"],["sum","Enumerable","Enumerable.html#method-i-sum","()","<p>sum of all elements\n"],["test","Object","Object.html#method-i-test","(similarity=\"pearson\",aggregation=\"weight_average\",k=nil)","<p>run a test using specific settings\n"],["time","Object","Object.html#method-i-time","()","<p>calculates the time between the execution, a block is required\n"],["to_a","MovieTest","MovieTest.html#method-i-to_a","()","<p>gets the original array of results\n"],["var","Enumerable","Enumerable.html#method-i-var","()","<p>variance of the elements\n"],["viewers","MovieData","MovieData.html#method-i-viewers","(m_id=nil)","<p>returns users that reviewed the movie or all users if m_id is nil\n"],["weight_average","Aggregation","Aggregation.html#method-c-weight_average","(data,u_id,ratings)","<p>predict by all similar user&#39;s average ratings weighted by similarity\n"]]}}